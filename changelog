# Change Log
All notable changes to this project will be documented in this file.
The format is based on [Keep a Changelog](http://keepachangelog.com/)
and this project adheres to [Semantic Versioning](http://semver.org/).

##[0.3.0] 2018 Feb 13
origin, combine, tight, tight_block, panel
All have its own correct OpenMP implementation

##[0.2.0] 2018 Jan 30
#### Prepare to add OpenMP
https://github.iu.edu/IUPUI-CS-HPC/ScalableIB/blob/master/ParallelCode/src_v2_noncubeOpenMP/lbm_ib_omp.c

##[0.2.0] 2017 Nov 30
#### added
Correct insert updateZeroGradientBoundary into collision function for all version
-- After 1st collision&streaming on [iX][iY], Note that [iX-1][iY-1] is ready for second compuation but first store their rho.
#### Simple Optimization
Remove if in computing the second collision&streaming for upper boundary

##[0.1.9] 2017 Nov 27
#### added
Try to insert updateZeroGradientBoundary

##[0.1.9] 2017 Nov 20
#### added
Line lx, ly compuatation and results are verified correctly
Remove periodic boundary condition.

##[0.1.8] 2017 Nov 19
lx*ly
4096*4096, blk_size=32, segment=512
        origin    overlap   tight(Block)    tight(segment)
        116.4s      76.6s      70.1s          69.8

81920*32, step=100
Tune blk_size
        origin overlap tight
        17.9   13.3   10.5

32*81920, step=100
Tune blk_size
        origin overlap tight
        21   15.5   12.7


##[0.1.8] 2017 Nov 17
4096*4096, blk_size=128
        origin overlap quicktest tight(Block) tight(segment)
        112.5s   71s     62.04s        69s     125.59s
#### Reason
compute from Y direction, block size=128 is too big





##[0.1.8] 2017 April 26
#### added
##[0.1.7] 2017 April 24
####added
-detailed results are saved in excel files.
####todo
-assembly code to explain performance difference

##[0.1.6] 2017 April 20
change the radio of obstacole from y/10 to x/10

#### adjusted based on column major
        tight has better results because the offset?
lx =50

ly=20000, maxT=100
        origin overlap quicktest tight
        5.90s   4.45s     4.45s     4.25s
ly=200, maxT=1000

        origin overlap quicktest tight
        0.58s   0.520s     0.514s  0.50



## [0.1.5] 2017 April 18
#### tight overlapped, 6.7s , slower!
    lx =250, ly=50, maxT=10000
        origin overlap quicktest tight
        6.3s   5.6s     5.6s     6.7s

#### configuration
    lx=20000, ly=50, maxT=100, 20000*50*9*8

    20000 and 100 configuration:(high because of loop order)
        origin overlap quicktest tight
        5.6s   4.6s     4.6s     18.14s

    merge the first streaming together






## [0.1.4] 2017 April 17
#### if not using -O3
origin: 35.47
overlapped/quicktest: almost the same
move to cluster

#### changed:
    loop order changed to iY->iX



reason: three lines are required each time.
how about proposed method: three lines are requried, but can calculate two iterations

## [0.1.3] 2017 April 12
#### to do
- cllision-streaming-collision-streaming forcely.
#### added
- will be updated in branch: quicktest.
    implemented in collision_streaming_twice().
#### results
-   still 5.6s(is this the bound)?

## [0.1.2] 2017 April 11
#### added
- cmake support
#### changed
- add -O3 also in link flag(default is only in comple flag),
#### problems
- if run all tasks in one scripts, latter case use more time.
- results not stable
#### done
verify results of two experiements

## [0.1.1] 2017 Apil 10
#### added
- now streaming is inside collision
- 5.6s for 10000 steps

## [0.1.0] 2017 Apil 10
#### added
- timer added
- save disabled
- progagate will be inside colision, and be put into tmpbuffer.
- 6.3 s for 10000 steps


